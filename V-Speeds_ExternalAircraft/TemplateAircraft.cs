using V_Speeds.ConstantsAndConverters;

namespace V_Speeds.Model.Aircrafts
{
    public class TemplateAircraft : Aircraft
    {
        /// <summary>
        ///     Constructor for TemplateAircraft, initializing all properties of Aircraft.
        /// </summary>
        public TemplateAircraft()
        {
            Gw = 1000;
            Lsa = 15;
            Cl = 1.23;
            Clg = 0.123;
            Thr = 3000;
            Bf = 2500;
            Rc = 2;
            Cd = 0.1;
            Rtr = 1.0;
            Rfc = 0.04;
        }

        /// <summary>
        ///     TemplateAircraft derives from Aircraft, so no afterburner should be present.
        /// </summary>
        /// <returns><c>false</c>.</returns>
        public override sealed bool HasAfterburner() => false;

        ///
        /// <summary>
        ///     Returns the lift force generated by TemplateAircraft for a given speed in a given fluid density.<br></br>
        /// </summary>
        ///
        /// <param name="tas">True Air Speed expected in m/s (meters per second) and positive!</param>
        /// <param name="density">The density of the fluid (in kg/m³) in which the aircraft is moving, must be positve.</param>
        /// <param name="coeff">The coefficient to be used for the formula, if it's null, Cl is chosen as default.</param>
        ///
        /// <returns>
        ///    The lift force in Newtons
        /// </returns>
        public override double LiftForce(double tas, double density, double? coeff = null)
        {
            // your code here
            return 0;
        }

        ///
        /// <summary>
        ///     Returns the drag force generated by TemplateAircraft for a given speed in a given fluid density.<br></br>
        /// </summary>
        ///
        /// <param name="tas">True Air Speed expected in m/s (meters per second) and positive!</param>
        /// <param name="density">The density of the fluid (in kg/m³) in which the aircraft is moving, must be positve.</param>
        ///
        /// <returns>
        ///    The drag force in Newtons
        /// </returns>
        public override double DragForce(double tas, double density)
        {
            // your code here
            return 0;
        }


        ///
        /// <summary>
        ///     Returns the estimated thrust according to the true airspeed and the density of the fluid in which the aircraft is moving.<br></br>
        /// </summary>
        ///
        /// <param name="tas">True Air Speed expected in m/s (meters per second) and positive!</param>
        /// <param name="density">The density of the fluid (in kg/m³) in which the aircraft is moving, must be positve.</param>
        ///
        /// <returns>
        ///    The estimated thrust force in Newtons
        /// </returns>
        public override double Thrust(double tas, double density)
        {
            // your code here
            return 0;
        }

        ///
        /// <summary>
        ///     Returns the projected acceleration of TemplateAircraft.
        /// </summary>
        ///
        /// <param name="tas">True Air Speed expected in m/s (meters per second) and positve!</param>
        /// <param name="density">The density of the fluid (in kg/m³) in which the aircraft is moving, must be postive!</param>
        ///
        /// <returns>
        ///     The the projected acceleration in m/s²
        /// </returns>
        public override double ProjectedAcceleration(double tas, double density)
        {
            // your code here
            return 0;
        }

        ///
        /// <summary>
        ///     Returns the projected deceleration of TemplateAircraft.
        /// </summary>
        ///
        /// <param name="tas">True Air Speed expected in m/s (meters per second) and positve!</param>
        /// <param name="density">The density of the fluid (in kg/m³) in which the aircraft is moving, must be postive!</param>
        ///
        /// <returns>
        ///     The the projected deceleration in m/s²
        /// </returns>
        public override double ProjectedDeceleration(double tas, double density)
        {
            // your code here
            return 0;
        }
    }
}
